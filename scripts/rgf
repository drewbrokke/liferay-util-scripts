#!/bin/bash

# Requires:
# rg (ripgrep, to perform searches) https://github.com/BurntSushi/ripgrep
# fzf (to display the fuzzy finding interface and handle keybindings) https://github.com/junegunn/fzf
# bat (to preview files) https://github.com/sharkdp/bat
# gh (github cli, to open files on Github or copy Github urls) https://github.com/cli/cli

# Fields are: 1: path, 2: line number, 3: column number, 4: match content
COMMAND=(rg --vimgrep "$@")
# COMMAND=(git grep --column "$@")

# I asked ChatGPT: "How do I render a bash array to a string and preserve quotes?"
printf -v RELOAD_COMMAND "%q " "${COMMAND[@]}"

FZF_ARGS=(
	--delimiter=":"
	--exit-0
	--info="inline"
	--layout=reverse
	--no-mouse
	--preview="bat --color=always --highlight-line='{2}' --theme=1337 {1}"
	--preview-window="down:70%,+{2},~3"
	--tiebreak=index
	--nth="1,4.."
	--with-nth="1,2,3,4.."
)
HELP_LINES=()

#
# Build up the key bindings and the header
#

if [ -z "${RGF_MAIN_EDITOR_COMMAND}" ]
then
	RGF_MAIN_EDITOR_COMMAND="execute-silent(subl {1}:{2}:{3})"
fi

FZF_ARGS+=(--bind="enter:${RGF_MAIN_EDITOR_COMMAND}")
HELP_LINES+=("<Enter> Open result in primary editor")

if [ -z "${RGF_SECONDARY_EDITOR_COMMAND}" ]
then
	RGF_SECONDARY_EDITOR_COMMAND="execute-silent(idea --line {2} {1})"

	# RGF_SECONDARY_EDITOR_COMMAND="become(nvim +{2} {1})"
	# RGF_SECONDARY_EDITOR_COMMAND="execute(nvim +{2} {1})"
fi


FZF_ARGS+=(--bind="alt-enter:${RGF_SECONDARY_EDITOR_COMMAND}")
HELP_LINES+=("<Alt-Enter> Open result in secondary editor")

REPO_NAME="$(git config remote.upstream.url || git config remote.origin.url)"
if [ -n "${REPO_NAME}" ]
then
	HELP_LINES+=("")

	BASE_DIR="$(git rev-parse --show-prefix)"

	TRACKING_BRANCH="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | sed 's,^.*/,,g')"
	if [ -z "${RGF_SECONDARY_EDITOR_COMMAND}" ]
	then
		TRACKING_BRANCH="master"
	fi

	FZF_ARGS+=(--bind="ctrl-o:execute-silent(gh browse -R '${REPO_NAME}' --branch '${TRACKING_BRANCH}' ${BASE_DIR}{1}:{2})")
	HELP_LINES+=("<Control-o> Open result on Github")


	FZF_ARGS+=(--bind="ctrl-y:execute(echo 'Copying link to {1}:{2}...' && gh browse -R '${REPO_NAME}' --branch '${TRACKING_BRANCH}' --no-browser ${BASE_DIR}{1}:{2} | tr -d '\n' | pbcopy)")
	HELP_LINES+=("<Control-y> Copy result Github link")
fi

FZF_ARGS+=(--bind="ctrl-r:reload(${RELOAD_COMMAND})")
HELP_LINES+=("<Control-r> Refresh results")

if [ "${#HELP_LINES[@]}" -gt 1 ]
then
	newline=$'\n'

	for headerLine in "${HELP_LINES[@]}"
	do
		HELP_STRING+="${headerLine}${newline}"
	done

	FZF_ARGS+=(--header-first)
	FZF_ARGS+=(--header="<Control-h> Show help")

	FZF_ARGS+=(--bind="ctrl-h:execute(echo '$HELP_STRING' | less)")
fi

#
# Go!
#

"${COMMAND[@]}" | fzf "${FZF_ARGS[@]}"
